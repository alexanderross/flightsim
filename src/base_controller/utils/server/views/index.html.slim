javascript:

  function handleResponse(Http){
    if(Http.status == 500){
      document.getElementById("errmsg").innerHTML = Http.responseText;
      document.getElementById("err_message_ctr").setAttribute("class","is-visible")
    }else{
      document.getElementById("err_message_ctr").setAttribute("class","")
    } 
    console.log(Http.responseText)
  }

  function renderDriveState(driveid, statedata){
    var ele = document.getElementById(driveid+"-state");
    ele.innerHTML = "";
    if(statedata == null){
      ele.innerHTML = "Not Available";
    }else{
      for(var i = 0; i < statedata.length; i++){
        var atrcol = document.createElement("div");
        atrcol.setAttribute("class","column");

        var namelabel = document.createElement("div");
        namelabel.setAttribute("class","has-text-weight-bold");
        namelabel.innerHTML = statedata[i].name;

        namelabel.setAttribute("title",statedata[i].label);

        if(statedata[i].val){
          namelabel.setAttribute("class","has-text-success");
        }else{
          namelabel.setAttribute("class","has-text-danger");
        }

        atrcol.appendChild(namelabel);

        ele.appendChild(atrcol);
      }
    }
    console.log(statedata);
    console.log(driveid);
  }

  function refreshDriveStates(){
    const Http = new XMLHttpRequest();
    const url="/states.json";
    Http.open("GET", url);
    Http.send();
    Http.onreadystatechange=(e)=>{
      if(Http.readyState == 4){
        var adata = JSON.parse(Http.responseText);
        renderDriveState('pitch', adata.pitch);
        renderDriveState('roll', adata.roll);
      }
    }
  }

  function sendValue(axis, dest, val){
    const Http = new XMLHttpRequest();
    const url="/write?axis="+axis+"&r="+dest+"&v="+val;
    Http.open("GET", url);
    Http.send();
    Http.onreadystatechange=(e)=>{
      handleResponse(Http);
    }
  }

  function sendDualValue(rdest, rval, pdest, pval){
    const Http = new XMLHttpRequest();
    const url="/write_dual?pc="+pdest+"|"+pval+"&rc="+rdest+"|"+rval;
    Http.open("GET", url);
    Http.send();
    Http.onreadystatechange=(e)=>{
      handleResponse(Http);
    }
  }

  function resetAxis(axis){
    if(axis == "r"){
      sendValue("roll",220,1);
    }

    if(axis == "p"){
      sendValue("pitch",220,1);
    }

    if(axis == "a"){
      sendDualValue(220,1,220,1);
    }
  }

  function setDrvEnab(axis, state){
    sendValue(axis,223, state);
    document.getElementById(axis+"box").checked = (state == 1);
    return true;
  }

  function drvEnab(obj, axis){
    setDrvEnab(axis, obj.checked ? 1 : 0);
    return true;
  }

  function spdStep(obj, axis){
    sendValue(axis,224, obj.checked ? 1 : 0);
    return true;
  }


html
  head
    title Flight Sim Control Panel
    link rel='stylesheet' type='text/css' href='https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css'
    meta name="viewport" content="width=device-width, initial-scale=1"
  body
    .columns#err_message_ctr
      .column.is-full
        .notification.is-danger#errmsg Something done fucked up
    .section.has-background-light
      .columns
        .column.is-one-third
          .box
            .columns
              .column.is-full
                b.is-size-3 Axis Speed Control
                p Control the current speed of each axis.
            .columns
              .column.is-full
                .box#spsldctr
                  #speedslider
                    #vline
                    #hline
                    #speeddot
                #speedreadout
                  span Pitch:
                  b#sprd-pitch.cnum 0
                  span RPM
                  span#sprdspc
                  span Roll:
                  b#sprd-roll.cnum 0 
                  span RPM

            .columns
              .column.is-full
                a.button.is-medium#zreset Reset to Zero
        .column.is-one-third
          .box 
            .columns
              .column.is-full
                b.is-size-3 Reset
            .columns
              .column.is-full
                a.button.is-medium onclick="resetAxis('p');" Reset Pitch Axis
            .columns
              .column.is-full
                a.button.is-medium onclick="resetAxis('r');" Reset Roll Axis
            .columns
              .column.is-full
                a.button.is-medium onclick="resetAxis('a');" Reset both Axes
            .columns
              .column.is-full
                a.button.is-medium.is-danger onclick="setDrvEnab('roll',0);" Disable Roll
            .columns
              .column.is-full
                a.button.is-medium.is-danger onclick="setDrvEnab('pitch',0);" Disable Pitch
        .column.is-one-third
          .box 
            .columns
              .column.is-full
                b.is-size-3 Send Value
                p Write a value to a drive's register
            .columns
              .column.is-full
                span.is-size-5 Axis
                br
                .select
                  select#caxis
                    option value="pitch" Pitch
                    option value="roll" Roll
            .columns
              .column.is-full
                span.is-size-5 Register
                input#cdest class="input" type="text" placeholder="1-219"
            .columns
              .column.is-full
                span.is-size-5 Value
                input#cval class="input" type="text" placeholder="less than 32k"
            .columns
              .column.is-full
                a.button.is-medium#sendcmd Send
      .columns
        .column.is-full
          .box 
            .columns
              .column
                div
                  b.is-size-5 Drive enabled
                div
                  label.checkbox 
                    input#pitchbox onclick="drvEnab(this,'pitch')" type="checkbox" value="1"
                    |  Pitch
                div
                  label.checkbox 
                    input#rollbox onclick="drvEnab(this,'roll')" type="checkbox" value="1"
                    |  Roll
              .column
                div
                  b.is-size-5 Speed Stepping
                  p if its enabled on the axis
                div
                  label.checkbox 
                    input#pitchspbox onclick="spdStep(this,'pitch')" type="checkbox" value="1"
                    |  Pitch
                div
                  label.checkbox 
                    input#rollspbox onclick="spdStep(this, 'roll');" type="checkbox" value="1"
                    |  Roll
      .columns
        .column.is-full
          .box 
            .columns
              .column#rds
                div
                  b.is-size-5 Roll Drive State
                .columns.is-multiline#roll-state
                  
              .column
                div
                  b.is-size-5 Pitch Drive State
                .columns.is-multiline#pitch-state
                  

                  


javascript:


  function sendSpeed(axis, speed){
    sendValue(axis, 221, speed);
  }

  function setSpeeds(final_roll_spd, final_pitch_spd){
    document.getElementById("sprd-pitch").innerHTML = final_pitch_spd;
    document.getElementById("sprd-roll").innerHTML = final_roll_spd;

    sendDualValue(221, final_roll_spd, 221, final_pitch_spd);
  }

  var box = document.getElementById("speedslider");
  box.addEventListener("mouseup", function(evt, obj){
    var bndbx = box.getBoundingClientRect();
    var roll = evt.clientX - bndbx.left - (bndbx.width /2);
    var pitch = evt.clientY - bndbx.top - (bndbx.height /2);

    var max_roll_spd = 1200;
    var max_pitch_spd = 1200;

    var final_roll_spd = Math.round((max_roll_spd / (bndbx.width/2)) * roll);
    var final_pitch_spd = - Math.round((max_pitch_spd / (bndbx.height/2)) * pitch);

    setSpeeds(final_roll_spd, final_pitch_spd);

    document.getElementById("speeddot").setAttribute("style", "left:"+ (evt.clientX - bndbx.left - 15) +"px; top: "+ (evt.clientY - bndbx.top - 15) +"px;");

  });

  document.getElementById("zreset").addEventListener("click", function(evt){
    setSpeeds(0,0);
    document.getElementById("speeddot").setAttribute("style", "left:110px; top:110px;");
  });

  document.getElementById("sendcmd").addEventListener("click", function(evt){
    var axis = document.getElementById("caxis").options[document.getElementById("caxis").selectedIndex].value;
    var dest = document.getElementById("cdest").value;
    var val = document.getElementById("cval").value;
    sendValue(axis, dest, val);
  });

  setInterval(refreshDriveStates, 5000);




  
css:
  #sprdspc{
    margin-left:15px;
  }

  #spsldctr{
    margin-bottom: 0px;
    text-align: center;
  }

  #speedslider{
    height: 250px;
    width: 250px;
    border: 1px solid #AAA;
    border-radius: 5px;
    position: relative;
  }

  #speeddot{
    height: 30px;
    width: 30px;
    background-color: #BADA55;
    border: 1px solid #BADA55;
    position: absolute;
    left: 110px;
    top: 110px;
    border-radius: 15px;
  }

  .cnum{
    margin-right: 5px;
  }

  #vline{
    border-right: 1px solid #DDD;
    height:250px;
    width:1px;
    position: absolute;
    left: 125px;
  }

  #rds {
    border-right: 1px solid #000;
  }

  #hline{
    border-top: 1px solid #DDD;
    height:1px;
    width:250px;
    position: absolute;
    top: 125px;
  }

  @keyframes fadeOut {
      0% {
          opacity: 1;
      }
      80% {
         opacity: 1
      }
      100% {
         opacity: 0;
      }
  }

  @-webkit-keyframes fadeOut {
      0% {
          opacity: 1;
      }
      80% {
          opacity: 1;
      }
      100% {
         opacity: 0;
      }
  }

  #err_message_ctr {
    opacity: 0;
    height:0px;
    transition: height 350ms ease-in-out, opacity 750ms ease-in-out;
  }

  #err_message_ctr.is-visible {
    display: block;
    height: auto;
    opacity: 1;
  }





